from lxml import etree
import re

# Define TEI namespace
ns = {'tei': 'http://www.tei-c.org/ns/1.0'}

correspondents = '495,8055,8009,8018,8418,8033,8016,540,8049,477,1010,1278,8109,3375,8011,8075,3099,3740,1918,252,8417,4079,8354,1391,8359,8432,629,1753,467,4037,8440,654,714,8098,8111,3590,1754,2757,8017,1365,2923,1586,8384,8126,850,8171,1789,8127,8412,2856,487,8071,8080,8466,8296,2899,3619,505,3481,8121,3067,3700,3902,8041,396,1553,6831,8160,8032,8332,1884,2810,8061,8101,8406,20172,8298,1548,8303,1560,8453,1456,2095,8178,8183,8386,8511,1283,8442,5565,152,1049,3429,3988,8030,8060,8064,672,527,8078,1453,8096,2473,8415,613,8306,974,1341,2019,8082,2916,3494,8057,8094,1936,2242,8130,8175,8443,8012,8085,8089,8504,3559,8161,1055,1327,8010,8063,8114,8370,330,772,1422,1911,3050,8014,8027,8073,8428,1214,2448,2807,3927,8081,8107,8318,8320,8391,8430,380,1145,1419,2866,4112,4349,6130,8117,179,266,966,997,1234,1804,1888,2867,8129,8407,8437,8459,147,1308,1731,1993,2876,3066,4082,8113,8115,8124,8168,8449,944,1850,2054,2919,3656,3659,8452,8486,8490,66,164,182,506,536,581,1000,1039,1915,3046,5454,8067,8122,8128,8405,8413,8493,9046,9697,6,350,1309,1903,2041,2237,2813,2844,3207,3873,3971,4060,8005,8092,8095,8152,8173,8385,8461,8492,293,904,1137,1382,1541,1568,1641,1690,2254,2262,2411,3688,3963,8022,8025,8026,8062,8086,8088,8108,8118,8283,8371,8399,8467,8473,8495,8512,9709,418,863,1014,1129,1336,1512,1546,1767,1860,2259,3088,3100,3302,3493,3932,3933,4033,8036,8051,8052,8066,8083,8093,8100,8105,8125,8293,8311,8330,8362,8389,8395,8401,8416,8422,8447,8450,8497,8508,8518,8519,8,278,315,475,583,753,830,918,931,1001,1227,1851,1974,2039,2258,2474,2601,2928,3108,3138,3143,3196,3206,3242,3276,3553,3641,3930,3959,3991,8013,8031,8054,8058,8074,8084,8090,8104,8301,8343,8377,8380,8394,8429,8616,9669,9684,9708,21023,265,272,455,458,464,663,674,684,761,829,1043,1057,1312,1366,1537,1567,1783,1865,1878,2043,2066,2128,2278,2307,2330,2340,2449,2553,2600,2606,2639,2832,2920,2939,3018,3043,3425,3528,3655,3716,3737,3906,3934,3964,4027,4087,4091,7879,7898,7901,7902,7925,7933,7964,7966,7978,8006,8024,8056,8070,8077,8079,8091,8097,8099,8103,8110,8120,8151,8186,8222,8275,8312,8325,8336,8339,8341,8358,8364,8376,8398,8410,8425,8426,8436,8455,8469,8480,8483,8485,8491,8501,8505,8510,8513,8520,20845,167,181,257,259,273,279,304,345,459,473,533,582,591,671,824,985,1005,1059,1120,1282,1301,1340,1390,1393,1397,1412,1418,1423,1428,1509,1535,1752,1770,1800,1824,1825,1861,1869,1953,2004,2109,2131,2157,2159,2169,2248,2284,2336,2378,2406,2445,2465,2552,2602,2616,2622,2626,2664,2680,2700,2716,2737,2740,2761,2804,2816,2825,2830,2833,2836,2839,2865,2885,2938,3048,3139,3151,3222,3223,3224,3273,3282,3327,3488,3633,3637,3639,3671,3744,3862,3876,3936,3979,3986,3994,4024,4055,4058,4107,4108,4851,6459,7073,7188,7899,7930,7941,7965,7984,7986,7987,7988,8007,8028,8034,8059,8065,8068,8087,8106,8112,8116,8119,8123,8157,8169,8182,8281,8282,8285,8291,8295,8297,8299,8300,8307,8315,8317,8338,8351,8363,8369,8374,8379,8383,8392,8441,8462,8464,8482,8487,8488,8489,8494,8498,8499,8502,8503,8506,8515,8516,19,150,151,253,254,260,261,262,263,264,277,320,344,403,404,414,430,447,448,456,460,466,499,510,592,646,653,673,675,702,704,752,755,760,840,858,900,917,957,989,991,992,1012,1040,1041,1042,1044,1045,1046,1048,1056,1095,1119,1183,1229,1255,1257,1258,1271,1374,1376,1377,1387,1388,1394,1396,1398,1399,1400,1410,1411,1413,1415,1421,1455,1508,1513,1515,1516,1531,1534,1536,1539,1540,1547,1555,1557,1566,1693,1697,1703,1704,1705,1719,1749,1751,1758,1759,1760,1761,1762,1784,1806,1817,1846,1862,1863,1877,1895,1964,1995,1996,1998,1999,2001,2002,2008,2102,2108,2122,2143,2156,2160,2163,2167,2168,2207,2236,2245,2260,2261,2265,2266,2269,2270,2271,2275,2292,2295,2296,2298,2299,2300,2301,2303,2304,2305,2317,2325,2328,2394,2400,2410,2442,2443,2463,2499,2507,2562,2590,2611,2614,2627,2632,2682,2704,2705,2706,2713,2730,2732,2776,2800,2806,2809,2811,2812,2815,2818,2819,2822,2824,2827,2828,2829,2835,2837,2842,2843,2850,2851,2852,2853,2884,2924,2925,2926,2930,2937,2944,2949,2950,2951,2952,2953,2954,2970,3015,3017,3029,3039,3040,3082,3101,3107,3123,3170,3171,3172,3178,3194,3203,3219,3239,3240,3241,3337,3427,3428,3483,3486,3492,3498,3530,3544,3546,3550,3555,3679,3698,3718,3720,3728,3730,3747,3749,3855,3856,3860,3866,3872,3878,3881,3890,3917,3918,3937,3958,3962,3985,4021,4028,4030,4031,4034,4062,4063,4066,4068,4069,4095,4100,4101,4129,4133,4249,4279,4480,5087,5395,5449,5499,5743,5787,5830,6133,6148,6285,6360,6510,7228,7524,7904,7907,7908,7910,7911,7912,7913,7914,7915,7917,7919,7922,7923,7924,7926,7928,7931,7934,7936,7937,7939,7940,7943,7944,7945,7946,7950,7951,7952,7955,7956,7957,7958,7960,7961,7967,7969,7970,7971,7972,7973,7974,7980,7981,7982,7983,8002,8008,8039,8040,8042,8047,8050,8053,8102,8136,8138,8140,8144,8145,8146,8147,8148,8149,8153,8154,8156,8158,8162,8163,8164,8165,8166,8167,8170,8174,8176,8179,8180,8181,8184,8185,8187,8190,8193,8194,8195,8196,8197,8200,8201,8205,8206,8209,8215,8225,8232,8235,8238,8249,8251,8261,8266,8276,8277,8278,8279,8280,8286,8287,8288,8289,8290,8294,8302,8305,8308,8309,8310,8313,8319,8323,8324,8326,8328,8329,8331,8334,8335,8342,8344,8346,8347,8348,8349,8352,8353,8355,8356,8357,8361,8365,8367,8368,8372,8373,8375,8378,8381,8387,8388,8390,8393,8400,8402,8403,8408,8409,8419,8421,8423,8424,8427,8431,8433,8434,8435,8438,8439,8444,8445,8446,8448,8454,8457,8458,8460,8463,8465,8468,8470,8471,8472,8474,8475,8476,8479,8481,8484,8496,8500,8507,8509,8514,8517,8521,8621,9682,9701,9706,9707,16734,18788,19009,20175,20484,20725,20972,21004,21190,21247,21422,21423,21425,21426,21428,21424'
valid_ids = set(correspondents.split(','))

# Load and parse XML
persons_path = "./data/index/persons.xml"
parser = etree.XMLParser(remove_blank_text=False)
tree = etree.parse(persons_path, parser)
root = tree.getroot()

# Function to transform surname text
def transform_surname(p_id, text):
    if not text:
        return text
    
    # If p_id is not in valid_ids, return with brackets replaced
    if p_id not in valid_ids:
        return text
    
    # If text does not contain a comma, return with brackets replaced
    if "," not in text:
        return text
    
    # If text ends with or starts with d.Ä. or d.J., return with brackets replaced
    if text.endswith("d.Ä.") or text.endswith("d.J."):
        return text

    started_with_bracket = text.startswith("[") or text.startswith("(")

    # 1. Split on comma, semicolon, brackets
    parts = re.split(r'[,\[\]\(\);]', text)

    # 2. Trim whitespace and remove empties
    parts = [p.strip() for p in parts if p.strip()]

    # 3. Build final string
    if not parts:
        return ""

    # if started_with_bracket is true, there is no main part
    # and we need to add the brackets

    if started_with_bracket:
            extras = ", ".join(parts)
            return f"({extras})"
    else:
        if len(parts) == 1:
            return parts[0]
        else:
            main = parts[0]
            extras = ", ".join(parts[1:])
            return f"{main} ({extras})"

# Traverse person elements and modify surnames
for person in root.findall(".//tei:person", ns):
    full_id = person.get("{http://www.w3.org/XML/1998/namespace}id")
    if not full_id or not full_id.startswith("P"):
        continue

    numeric_id = full_id[1:]

    pers_name = person.find("tei:persName[@type='main']", ns)
    if pers_name is not None:
        surname = pers_name.find("tei:surname", ns)
        if surname is not None and surname.text:
            original = surname.text
            updated = transform_surname(numeric_id, original)
            if original != updated:
                print(f"Updating surname: '{original}' -> '{updated}'")
                surname.text = updated

# Write changes back to file
xml_str = etree.tostring(root, encoding="utf-8", pretty_print=True, xml_declaration=False).decode("utf-8")
xml_str = '<?xml version="1.0" encoding="UTF-8" standalone="no" ?>\n' + xml_str
with open(persons_path, "w", encoding="utf-8") as f:
    f.write(xml_str)